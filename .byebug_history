quit
self.class
self
n
self.class
n
@h_delta
s
n
possible_moves
n
s
c_piece.color
c_piece.class
s
curr_pieces.inspect
n
king_pos
n
s
n
s
v_pos
s
self.is_a?(SlidingPieces)
self.class
s
n
values_pos
n
values_pos
n
values_pos
s
values_pos
s
values_pos
s
values_pos
s
values_pos
s
values_pos
s
values_pos
s
values_pos
s
self.pos
self_pos
@h_delta
delta_k
values_pos
s
values_pos
s
values_pos
delta_k
s
possible_moves
n
s
n
s
quit
possible_moves
n
s
self.class
s
n
s
n
s
n
possible_moves
n
s
c_piece.class
s
n
king_pos
n
s
n
s
c_piece.new_moves
c_piece.color
c_piece.pos
c_piece.new_moves.include?(king_pos)
color
c_piece.color
c_piece.class
s
n
king_pos
n
s
quit
color
n
king_pos
n
color
s
in_check?(color)
new_board.class
new_board.in_check?(color)
n
s
n
quit
display.render
board.render
new_board.render
new_board.in_check?(color)
s
end_pos
curr_piece.pos
s
self[start_pos].class
self[end_pos].class
s
curr_piece.class
curr_piece
n
s
n
quit
self[start_pos].new_moves
self[start_pos].class
curr_piece.new_moves.empty?
curr_piece.class
curr_piece.new_moves
s
end_pos
start_pos
s
n
curr_piece.class
s
n
self.object_id
new_board.object_id
new_board.class
s
n
s
possible_moves
n
s
n
s
curr_piece.class
end_pos
curr_piece.color
s
pos
s
curr_piece.color
@color
color
s
test_board
n
s
pieces
test_board.class
n
nn
n
s
self.class
quit
n
s
move
curr_piece_pos
move_into_check?(curr_piece_pos, move)
s
piece.pos
move
n
s
piece.new_moves
piece.class
n
s
piece.new_moves
piece.class
s
curr_pieces[2].class
curr_pieces[1].class
curr_pieces[1].color
curr_pieces[0].class
curr_pieces[0].color
n
s
in_check?(color)
s
@curr_player
s
display.render
n
s
n
s
n
quit
in_check?(color)
in_check?
s
color
s
quit
color
check_mate?(color)
s
n
s
n
s
self[end_pos].class
n
s
n
s
n
s
n
s
n
s
in_check?(turn_color)
n
king_pos
n
s
n
s
n
s
n
s
n
s
n
board.check_mate?(curr_player)
n
s
moves
n
s
piece.color
piece.class
s
